{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import RobustScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "import numpy as np\n",
        "\n",
        "# Define categorical and numerical features\n",
        "categorical_features = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']\n",
        "numerical_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\n",
        "\n",
        "# Define the ColumnTransformer to apply different preprocessing to different columns\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', RobustScaler(), numerical_features),\n",
        "        ('cat', OneHotEncoder(), categorical_features)\n",
        "    ])\n",
        "\n",
        "# Apply the preprocessing to the dataset, excluding the target variable if present\n",
        "X_processed = preprocessor.fit_transform(data.drop(['target'], axis=1) if 'target' in data.columns else data)\n",
        "y = data['target'] if 'target' in data.columns else None\n",
        "\n",
        "#Optional: Convert the processed features back to a DataFrame for visibility\n",
        "# Get feature names after one-hot encoding\n",
        "ohe_feature_names = preprocessor.named_transformers_['cat'].get_feature_names_out(categorical_features)\n",
        "all_feature_names = np.concatenate([numerical_features, ohe_feature_names])\n",
        "\n",
        "# Create a DataFrame with the processed features\n",
        "X_processed_df = pd.DataFrame(X_processed, columns=all_feature_names)\n",
        "\n",
        "# Display the processed DataFrame's descriptive statistics\n",
        "print(X_processed_df.describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Jc6ZgjyXrL7",
        "outputId": "3ce074ee-3e96-407a-a93d-59402b7264bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               age     trestbps         chol      thalach      oldpeak  \\\n",
            "count  1025.000000  1025.000000  1025.000000  1025.000000  1025.000000   \n",
            "mean     -0.120450     0.080585     0.093750    -0.084878     0.150840   \n",
            "std       0.697868     0.875836     0.806133     0.676639     0.652807   \n",
            "min      -2.076923    -1.800000    -1.781250    -2.382353    -0.444444   \n",
            "25%      -0.615385    -0.500000    -0.453125    -0.588235    -0.444444   \n",
            "50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
            "75%       0.384615     0.500000     0.546875     0.411765     0.555556   \n",
            "max       1.615385     3.500000     5.062500     1.470588     3.000000   \n",
            "\n",
            "             sex_0        sex_1         cp_0         cp_1         cp_2  ...  \\\n",
            "count  1025.000000  1025.000000  1025.000000  1025.000000  1025.000000  ...   \n",
            "mean      0.304390     0.695610     0.484878     0.162927     0.277073  ...   \n",
            "std       0.460373     0.460373     0.500015     0.369479     0.447771  ...   \n",
            "min       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n",
            "25%       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n",
            "50%       0.000000     1.000000     0.000000     0.000000     0.000000  ...   \n",
            "75%       1.000000     1.000000     1.000000     0.000000     1.000000  ...   \n",
            "max       1.000000     1.000000     1.000000     1.000000     1.000000  ...   \n",
            "\n",
            "           slope_2         ca_0         ca_1         ca_2         ca_3  \\\n",
            "count  1025.000000  1025.000000  1025.000000  1025.000000  1025.000000   \n",
            "mean      0.457561     0.563902     0.220488     0.130732     0.067317   \n",
            "std       0.498439     0.496142     0.414778     0.337271     0.250693   \n",
            "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
            "25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
            "50%       0.000000     1.000000     0.000000     0.000000     0.000000   \n",
            "75%       1.000000     1.000000     0.000000     0.000000     0.000000   \n",
            "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
            "\n",
            "              ca_4       thal_0       thal_1       thal_2       thal_3  \n",
            "count  1025.000000  1025.000000  1025.000000  1025.000000  1025.000000  \n",
            "mean      0.017561     0.006829     0.062439     0.530732     0.400000  \n",
            "std       0.131413     0.082397     0.242069     0.499298     0.490137  \n",
            "min       0.000000     0.000000     0.000000     0.000000     0.000000  \n",
            "25%       0.000000     0.000000     0.000000     0.000000     0.000000  \n",
            "50%       0.000000     0.000000     0.000000     1.000000     0.000000  \n",
            "75%       0.000000     0.000000     0.000000     1.000000     1.000000  \n",
            "max       1.000000     1.000000     1.000000     1.000000     1.000000  \n",
            "\n",
            "[8 rows x 30 columns]\n"
          ]
        }
      ]
    }
  ]
}
